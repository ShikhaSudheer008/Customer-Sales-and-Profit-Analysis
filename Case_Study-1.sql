--Dataset: The 3 key datasets for this case study: 
--a. FactTable: The Fact Table has 14 columns mentioned belowand4200rows. Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses, Marketing, Inventory, Budget Profit, Budget COGS, Budget Margin, Budget Sales, and Area Code Note: COGS stands for Cost of Goods Sold 
--b. ProductTable: The ProductTable has four columns named Product Type, Product, ProductID, and Type. It has 13 rows which can be brokendowninto further details to retrieve the information mentioned in theFactTable. 
--c. LocationTable: Finally, the LocationTable has 156 rows andfollowsasimilar approach to ProductTable. It has four columns named AreaCode, State, Market, and Market Size.

SELECT * FROM Fact;
SELECT * FROM Location;
SELECT * FROM Product;

--1. Display the number of states present in the Location Table. 
SELECT COUNT(State) AS NoOfStates FROM location;
--Displays count of all the states records present in the table (with states value repeated)
SELECT COUNT(DISTINCT State) AS NoOfStates FROM location;
--Disaplays the count of states from the table (without repetition).

--2. How many products are of regular type? 
SELECT COUNT (*) AS RegularCount FROM Product WHERE Type = 'Regular';

--3. How much spending has been done on marketing of product ID 1? 
SELECT ProductId, SUM(Marketing) AS Total FROM Fact WHERE ProductId=1 GROUP BY ProductId;

--4. What is the minimum sales of a product? 
SELECT ProductId, MIN(Sales) AS MinimumSales FROM Fact GROUP BY ProductId ORDER BY ProductId;
-- Displays minimum sales value of each product from the Fact table.
SELECT TOP 1 ProductId, Sales AS MinimumSales FROM Fact ORDER BY Sales;
-- Displays minimum sales collectively from the Fact table.

--5. Display the max Cost of Good Sold (COGS). 
SELECT ProductId, MAX(COGS) AS MaxCOGS FROM Fact GROUP BY ProductId ORDER BY ProductId;
-- Displays maximum COGS value of each product from the Fact table.
SELECT TOP 1 ProductId, COGS AS MaxCOGS FROM Fact ORDER BY COGS DESC;
-- Displays maximum COGS collectively from the Fact table.

--6. Display the details of the product where product type is coffee. 
SELECT * FROM Product WHERE Product_Type='Coffee';

--7. Display the details where total expenses are greater than 40. 
SELECT * FROM Fact WHERE Total_Expenses > 40 ORDER BY Total_Expenses;

--8. What is the average sales in area code 719? 
SELECT Area_Code, AVG(Sales) AverageSales FROM Fact WHERE Area_Code=719 GROUP BY Area_Code;

--9. Find out the total profit generated by Colorado state. 
ALTER TABLE Location ALTER COLUMN Area_Code INT NOT NULL;
ALTER TABLE Location ADD PRIMARY KEY (Area_Code);
-- Added NOT NULL constraint to the column Area_Code, to which PRIMARY KEY constraint was later added.
SELECT Area_Code FROM Fact WHERE Area_Code NOT IN (SELECT Area_Code FROM Location);
-- Check if there are any records absent in Location table, with respect to Fact table.
ALTER TABLE Fact ALTER COLUMN Area_Code INT NOT NULL;
-- Matched the column datatypes of both Fact and Location table.
ALTER TABLE fact ADD FOREIGN KEY (area_code) REFERENCES location(area_code);
-- Foreign key constraint added to Area_Code in Fact table.

SELECT State, SUM(profit) AS TotalProfit FROM Location l JOIN Fact f ON l.Area_Code=f.Area_Code WHERE State='Colorado' GROUP BY State;

--10. Display the average inventory for each product ID. 
ALTER TABLE product ALTER COLUMN ProductId INT NOT NULL;
ALTER TABLE product ADD PRIMARY KEY (ProductId);
-- Added NOT NULL constraint to the column Area_Code, to which PRIMARY KEY constraint was later added.
SELECT ProductId FROM Fact WHERE ProductId NOT IN (SELECT ProductId FROM Product);
-- Check if there are any records absent in Product table, with respect to Fact table.
ALTER TABLE fact ALTER COLUMN productid INT NOT NULL;
-- Matched the column datatypes of both Fact and Location table.
ALTER TABLE fact ADD FOREIGN KEY (productid) REFERENCES product(productid);
-- Foreign key constraint added to Area_Code in Fact table.
SELECT t.ProductId, p.Product, t.AVGInventory FROM (SELECT ProductId, AVG(Inventory) AVGInventory FROM Fact GROUP BY ProductId) t
JOIN Product p ON p.ProductId=t.ProductId ORDER BY ProductId;

--11. Display state in a sequential order in a Location Table. 
SELECT DISTINCT State FROM Location ORDER BY State;
SELECT DISTINCT State FROM Location ORDER BY State DESC;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT t.ProductId, p.Product, t.AVGBudget FROM (SELECT ProductId, AVG(Budget_Margin) AVGbudget FROM Fact GROUP BY ProductId) t
JOIN Product p ON p.ProductId=t.ProductId WHERE t.AVGbudget > 100 ORDER BY ProductId;

--13. What is the total sales done on date 2010-01-01? 
SELECT Date, SUM(Sales) AS TotalSales FROM Fact WHERE Date='2010-01-01' GROUP BY Date;

--14. Display the average total expense of each product ID on an individual date. 
SELECT ProductId, Date, AVG(Total_Expenses) AverageTotalExpense FROM Fact GROUP BY ProductId, Date ORDER BY ProductId, Date;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
SELECT f.Date, p.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_Code FROM Fact f
JOIN Product p ON f.ProductId=p.ProductId
JOIN Location l ON f.Area_Code=l.Area_Code;

--16. Display the rank without any gap to show the sales wise rank. 
SELECT DENSE_RANK() OVER(ORDER BY Sales DESC) AS DenseRank, f.* FROM Fact f;

--17. Find the state wise profit and sales. 
SELECT State, SUM(Profit) as Profit, SUM(Sales) as Sales FROM Fact f JOIN Location l ON f.Area_Code=l.Area_Code
GROUP BY l.State ORDER BY State;

--18. Find the state wise profit and sales along with the product name. 
SELECT State, Product, SUM(Profit) AS Profit, SUM(Sales) AS Sales 
FROM Fact f JOIN Location l ON f.Area_Code=l.Area_Code
JOIN Product p ON p.ProductId=f.ProductId GROUP BY l.State, p.Product ORDER BY State;

--19. If there is an increase in sales of 5%, calculate the increased sales. 
SELECT Sales,(Sales*1.05) AS IncreasedSales FROM Fact;

--20. Find the maximum profit along with the product ID and producttype. 
SELECT MAX(Profit) AS MaxProfit,p.ProductId, p.Product_Type FROM Fact f JOIN Product p ON f.ProductId=p.ProductId
GROUP BY p.ProductId, p.Product_Type;

--21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 
CREATE PROCEDURE Product_Details @parameter NVARCHAR(30) 
AS 
SELECT * FROM Product WHERE Product_Type = @parameter; 
EXEC Product_Details @parameter = 'Herbal Tea'; 

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
SELECT *, (CASE 
		   WHEN total_expenses < 60 THEN 'Profit'
		   ELSE 'Loss'
		   END) AS Remarks FROM Fact;

--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.
SELECT DATEPART(WEEK, Date) AS Week, SUM(Sales) AS TotalWeeklySales
FROM Fact WHERE (DATE BETWEEN '2010-01-01' AND '2011-01-01')
GROUP BY DATEPART(WEEK, Date) ORDER BY DATEPART(WEEK, Date);
--Returns the total sales for the year 2010, grouped by weeks.
--				S  M  T  W  T  F  S  - TotalSales
--							   1  2  - 63647
--				3  4  5  6  7  8  9  - 239287
--				10 11 12             - 98225
SELECT DATEPART(WEEK, Date) AS Week, SUM(Sales) AS TotalWeeklySales
FROM Fact WHERE (DATE BETWEEN '2011-01-01' AND '2012-01-01')
GROUP BY DATEPART(WEEK, Date) ORDER BY DATEPART(WEEK, Date);
--Returns the total sales for the year 2011, grouped by weeks.
--				S  M  T  W  T  F  S  - TotalSales
--							      1  - 35316
--				2  3  4  5  6  7  8  - 243397
--				9  10 11 12          - 139939

--24. Apply union and intersection operator on the tables which consist of attribute area code. 
SELECT Area_Code FROM Fact UNION SELECT Area_Code FROM LOCATION;
SELECT Area_Code FROM Fact INTERSECT SELECT Area_Code FROM LOCATION;

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
CREATE FUNCTION ProductDetail (@parameter NVARCHAR(50))
		RETURNS TABLE 
		AS
		RETURN (SELECT * FROM Product WHERE Product_Type=@parameter);
SELECT * FROM dbo.ProductDetail('Coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
BEGIN TRANSACTION
UPDATE Product SET Product_Type = 'Tea' WHERE Product_Type='Coffee' AND ProductId=1;
SELECT * FROM Product;
ROLLBACK TRANSACTION;
SELECT * FROM Product;

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
SELECT Date, ProductId, Sales FROM Fact WHERE Total_Expenses BETWEEN 100 AND 200;

--28. Delete the records in the Product Table for regular type. 
--Error popped : The DELETE statement conflicted with the REFERENCE constraint "FK__Fact__ProductId__4AB81AF0". The conflict occurred in database "SQL_Assigment_CaseStudy", table "dbo.Fact", column 'ProductId'.
-- This occured since foreign key constraint was present in ProductId in the Facts table. 
ALTER TABLE Fact DROP CONSTRAINT FK__fact__ProductId__4AB81AF0;
--Removed foreign key constraint from ProductId. Now we can delete the records from the reference table (ie..Product table).
DELETE FROM product WHERE type = 'Regular';

--29. Display the ASCII value of the fifth character from the column Product.
SELECT Product, FifthChara, ASCII(FifthChara) AS ASCII FROM (SELECT Product, SUBSTRING(Product, 5, 1) as FifthChara FROM Product) t;
